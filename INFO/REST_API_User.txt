
REST API User
---------------------

Postman для тесту REST API
https://www.postman.com/

Для здійснення кожного запиту, натискаємо Send .
Якщо REST-запит має тіло, необхідно налаштування
в Postman: Body > raw > JSON.


(1) Отримання даних

GET
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers

Даних, поки, немає.


(2) Створення даних

POST
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers

Виконуємо окремі запити


        {
            "name": "Simon",
            "phone": "+380971234567",
            "address": "Central st. 212"
        }
        {
            "name": "Irina",
            "phone": "+380981087404",
            "address": "Jhonson st 13"
        }
        {
            "name": "Anastasiya",
            "phone": "+380981087400",
            "address": "Stone st 112"
        }
        {
            "name": "Anastasiya Green",
            "phone": "+380981447400",
            "address": "Stone st 512"
        }
        {
            "name": "Irina Green",
            "phone": "+380941447400",
            "address": "Shevchenko st 512"
        }

Перевіремо через MySQL Workbench.


(3) Отримання всіх даних

GET
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers


(4) Отримання даних за id

GET
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers/2

Також, за неіснуючим id

GET
http://localhost:8080/Your-Project-Name-1.0-SNAPSHOT/api/v1/users/17


(5) Отримання останього запису в таблиці

GET
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers/last-entity


(6) Отримання даних за Query Params
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers/query-by-name?name=Anastasiya
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers/query-by-phone?phone=%2B380971234567
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers/query-by-address?address=Stone st 112

http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers/query-order-by?orderBy=name
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers/query-order-by?orderBy=address
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers/query-order-by?orderBy=phone


(7) Оновлення даних за id

PUT
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers/5

        {
            "name": "Simon",
            "phone": "+380971234567",
            "address": "Central st. 212"
        }
        {
            "name": "Irina",
            "phone": "+380981087404",
            "address": "Jhonson st 13"
        }
        {
            "name": "Anastasiya",
            "phone": "+380981087400",
            "address": "Stone st 112"
        }
        {
            "name": "Anastasiya Green",
            "phone": "+380981447400",
            "address": "Stone st 512"
        }
        {
            "name": "Irina Green",
            "phone": "+380941447400",
            "address": "Shevchenko st 512"
        }

Перевіремо через MySQL Workbench та REST-запит за відповідним id.

Також, спробуємо оновити за неіснуючим id.


(8) Видалення даних за id

DELETE
http://localhost:8080/HW-SPRING-JDBC-REST-Build-Alpha-1.0.1/api/v1/customers/5

Перевіремо через MySQL Workbench, REST-запити отримання всіх даних
та за відповідним id.

Також, спробуємо повторно видалити та тим самим id, та за неіснуючим id.

